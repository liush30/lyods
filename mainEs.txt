package main

func main() {
	//// 创建ES client用于后续操作ES
	//client, err := elastic.NewClient(
	//	// 设置ES服务地址，支持多个地址
	//	elastic.SetURL("http://127.0.0.1:9200"),
	//	// 设置基于http base auth验证的账号和密码
	//	elastic.SetBasicAuth("user", "secret"))
	//if err != nil {
	//	// Handle error
	//	fmt.Printf("连接失败: %v\n", err)
	//} else {
	//	fmt.Println("连接成功")
	//}
	//// 执行ES请求需要提供一个上下文对象
	//ctx := context.Background()
	//// 首先检测下addrList索引是否存在
	//exists, err := client.IndexExists("addrList").Do(ctx)
	//if err != nil {
	//	// Handle error
	//	panic(err)
	//}
	//if !exists {
	//	// addrList索引不存在，则创建一个
	//	_, err := client.CreateIndex("addrList").BodyString(param.ADDR_MAPPING).Do(ctx)
	//	if err != nil {
	//		// Handle error
	//		panic(err)
	//	}
	//}
	//walletAddr := entity.WalletAddr{
	//	WaAddr:      string("0xooooooo88888888"),
	//	WaRiskLevel: 1,
	//	WaTicker:    string("BTC"),
	//	WaChain:     "bitcoin",
	//	DsAddr: []entity.AdsDataSource{
	//		{
	//			DsAddr: "xxxxxxx.test0000.com",
	//			DsType: "1",
	//			Number: 1,
	//		},
	//	},
	//}
	//err := tool.Insert("addr_list", walletAddr.WaAddr, walletAddr)
	//if err != nil {
	//	fmt.Printf("Insert =========Error=========:\v\n", err.Error())
	//}
	//bol, err := tool.IsExistById("addr_list", "13echkf999999999999999999999")
	////err, waAddr := tool.GetWalletAddr("addr_list", "0xooooooo88888888")
	//if err != nil {
	//	fmt.Printf("GetWalletAddr =========Error=========:\v\n", err.Error())
	//}
	//fmt.Println(bol)
	//dsAddr := entity.AdsDataSource{
	//	DsAddr: "888888.test0000.com",
	//	DsType: "2",
	//	Number: 1,
	//}
	//err = tool.UpdateDsAddrSource("0xooooooo88888888", dsAddr)
	//if err != nil {
	//	fmt.Printf("UpdateDsAddrSource =========Error=========:\v\n", err.Error())
	//}
	//err, waAddr := tool.GetWalletAddrByte("addr_list", "0xooooooo88888888")
	//if err != nil {
	//	fmt.Printf("GetWalletAddr =========Error=========:\v\n", err.Error())
	//}
	//fmt.Println(string(waAddr))
	//isTrue, err := tool.IsExitsAddrSource("0xooooooo88888888", "888888.test0000.com")
	//if err != nil {
	//	fmt.Println("报错啦")
	//}
	//fmt.Println(isTrue)
	//==========================获取该地址来源的bitcoin链上的风险名单信息以及交易信息并往下追查三层
	//err := tool.GetAddrListByJSONOnBitcoin("http://api.ransomwhe.re/export", 1, []string{"address", "blockchain"}, "result")
	//if err != nil {
	//	fmt.Println("报错啦！")
	//}
	//str, err := tool.GetSublistByAddr("17TMc2UkVRSga2yYvuxSD9Q1XyB2EPRjTF")
	//if err != nil {
	//	fmt.Println("报错啦")
	//}
	//fmt.Println(len(str))
	//==========删除索引
	//tool.DeleteIndexByName(param.ADDRESS_TRANS_LIST)
	//tool.DeleteIndexByName(param.WA_ADDR_INDEX)
	//创建addrList索引-风险名单
	//tool.CreateIndex(param.WA_ADDR_INDEX, param.ADDR_MAPPING)
	//创建transList索引-交易信息
	//tool.CreateIndex(param.ADDRESS_TRANS_LIST, param.TRANS_MAPPING)
	//=======================================================
	//err := tool.AddTransAndSourceByAddr("17TMc2UkVRSga2yYvuxSD9Q1XyB2EPRjTF", 3)
	//if err != nil {
	//	fmt.Println("报错啦")
	//}
	//查询tran_list文档总数
	//count, err := tool.GetIndexDocNum(param.ADDRESS_TRANS_LIST)
	//if err != nil {
	//	fmt.Printf(err.Error())
	//}
	//fmt.Println(count)
	//err := tool.GetAddrListOnCsv("https://gist.githubusercontent.com/banteg/1657d4778eb86c460e03bc58b99970c0/raw/2b8e0b2c1074b995b992397f34ab2843cf6bdf72/uniswap-trm.csv", "ETH", 0, 3)
	//if err != nil {
	//	fmt.Println("报错啦")
	//}
	//list := tool.GetChainOnXmlByElement("https://www.treasury.gov/ofac/downloads/sdn.xml", `^Digital Currency Address - ([\D]{3,16}$)`, 1)
	//log.Println(list)
}
